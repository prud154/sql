select * from information_schema.tables where table_schema='public';

select * from products;
insert into products values ('P2', 'Loan', null);

drop TABLE ACCOUNTS cascade;
CREATE TABLE ACCOUNTS
(
	ACC_NO			INT ,
	ACC_TYPE		VARCHAR(30) references products(prod_name),
	CUST_ID			VARCHAR(20) references customers(customer_id),
	BALANCE			FLOAT,
    constraint pk_acc primary key (acc_no, acc_type)
);

insert into accounts values (12345, 'Savings', 'C1', 9000);
insert into accounts values (1234, 'Savings', 'C2', 2000);
insert into accounts values (1234567, 'Savings', 'C20', 2000);
insert into accounts values (12345, 'Loan', 'C1', 9000);
select * from accounts;

drop TABLE TRANSACTIONS;
CREATE TABLE TRANSACTIONS
(
	TRNS_ID			INT generated by default as identity ,
	TRNS_TYPE		VARCHAR(20) ,
	TRNS_DATE		DATE,
	ACC_NO			INT ,
    acc_type        VARCHAR(30),
	AMOUNT			FLOAT,
	STATUS			VARCHAR(10) default 'Success',
    constraint pk_trns primary key(trns_id,TRNS_TYPE),
    constraint fk_acc_no foreign key(acc_no,acc_type) references accounts(acc_no,acc_type)
);

-- insert into TRANSACTIONS values (1,'Online Payment', current_date, 12345,'Savings', 100, 'Success');
-- insert into TRANSACTIONS values (1,'Withdrawal', current_date, 12345,'Savings', 50, 'Failure');
-- insert into TRANSACTIONS values (1,'test', current_date, 12345,'Savings', 50, default);
-- insert into TRANSACTIONS values (2,'test', current_date, 12345,'Savings', 555, default);
-- insert into TRANSACTIONS values (3,'test', current_date, 12345,'Loan', 333, default);
select * from TRANSACTIONS;

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Savings', 100, 'Success');

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Loan', 500, 'Failure');

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Loan', 200, default);

select * from TRANSACTIONS;



create table test (id serial, name varchar);
insert into test (name) values ('TFQ');
select * from test;


-- Syntax for MSSQL:
create table test (id int primary key identity(1,1), name varchar(20));
insert into test (name) values ('TFQ');

select * from test;


-- UPDATE DML command
select * from TRANSACTIONS;

update transactions
set amount = 999, trns_date = to_date('01-01-2020', 'dd-mm-yyyy')
where trns_id = 1;

rollback;
commit;


-- DELETE command:
select * from TRANSACTIONS;

delete from transactions;

delete from transactions
where trns_id = 1;

rollback; -- similar to undo. Removes the uncommitted transactions from the current session.

commit; -- permanently saves the changes to the DB.


-- TRUNCATE DDL command:
truncate table transactions;


-- SAVEPOINT command:
select * from TRANSACTIONS;
select * from accounts;

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Savings', 100, 'Success');

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Loan', 500, 'Failure');

savepoint after_2_trns;

insert into TRANSACTIONS (trns_type,TRNS_DATE,acc_no,acc_type,amount,status)
values ('Online Payment', current_date, 12345,'Loan', 200, default);

savepoint after_all_trns;

insert into accounts values (999, 'Savings', 'C1', 9000);

savepoint after_del_acc;

insert into accounts values (888, 'Savings', 'C1', 9000);

rollback;
commit;
rollback to after_all_trns;
rollback to after_2_trns;




-- MERGE command in Oracle
DROP TABLE EMPLOYEES;

CREATE TABLE EMPLOYEES
(
	EMP_ID			VARCHAR(20),
	FIRST_NAME		VARCHAR(40),
	LAST_NAME		VARCHAR(40),
	SALARY			FLOAT ,
	BRANCH_CODE		VARCHAR(10)
);

insert into employees values ('E1', 'Mohan', 'Kumar', 500, null);
insert into employees values ('E2', 'James', 'Xavier', 200, null);
insert into employees values ('E3', 'David', 'Smith', 300, null);
insert into employees values ('E4', 'Ali', 'Abdaal', 400, null);

create table emp_history as
select * from employees where 1=2;

select * from employees;
select * from emp_history;

merge into emp_history h
using employees e on (e.emp_id = h.emp_id)
when matched then
    update set h.salary = e.salary
    where h.salary <> e.salary
when not matched then
    insert (emp_id, first_name, last_name, salary,branch_code)
    values (e.emp_id, e.first_name, e.last_name, e.salary, e.branch_code);


update employees
set salary = 999
where emp_id = 'E1';
