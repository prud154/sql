
drop table sales;
drop table products;

create table products
(
	product_code			varchar(20) primary key,
	product_name			varchar(100),
	price					float,
	quantity_remaining		int,
	quantity_sold			int
);

create table sales
(
	order_id			int generated by default as identity primary key,
	order_date			date,
	product_code		varchar(20) references products(product_code),
	quantity_ordered	int,
	sale_price			float
);

insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P1', 'iPhone 13 Pro Max', 1000, 5, 195);

insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('10-01-2022','dd-mm-yyyy'), 'P1', 100, 120000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('20-01-2022','dd-mm-yyyy'), 'P1', 50, 60000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('05-02-2022','dd-mm-yyyy'), 'P1', 45, 540000);



select * from products;
select * from sales;

-- select sum(price) from products; -- Inbuild function SUM

-- What is a procedure:
It is a "Named" block of code.

-- PL/SQL or PgSQL -- Procedural language for SQL

-- For every iPhone 13 Pro Max sale, modify the database tables accordingly.

-- Initial version of the procedure (without checking if product exists)
create or replace procedure pr_product_sales()
language plpgsql
as $$
declare
    -- declare variables
    v_prod_code     varchar(10);
    v_price         int;
begin
    -- main block of our code
    -- 1. Fetch the product_code and price for each product from products table
    select product_code, price
    into v_prod_code, v_price
    from products
    where product_name = 'iPhone 13 Pro Max';

    -- 2. load new data to sales table
    insert into sales (order_date, product_code, quantity_ordered, sale_price)
        values (current_date, v_prod_code, 1, (1*v_price));

    -- 3. update the products table accordingly as per sale.
    update products
    set quantity_remaining = quantity_remaining - 1
    , quantity_sold = quantity_sold + 1
    where product_code = v_prod_code;

    raise notice 'Product sold successfully!';
end;
$$

-- Execute a procedure:
call pr_product_sales();



/*
select 'I''m Thoufiq' as my_name;
select E'I\'m Thoufiq' as my_name;
select $$I'm Thoufiq$$ as my_name;
*/

-- Stored Procedure / Procedure : Generally used to build a logic
-- User Defined Function / Function : Generally used to calculate some values and return it OR used to check certain conditions.

create or replace function fn_check_if_prod_exists(p_product_name varchar, p_quantity int)
returns boolean
language plpgsql
as $$
declare
    v_count     int;
begin
    select count(1)
    into v_count
    from products
    where product_name = p_product_name
    and quantity_remaining >= p_quantity;

    if v_count > 0 then
        return True;
    else
        return False;
    end if;
end;
$$

-- Execute a function:
select fn_check_if_prod_exists('iPhone 13 Pro Max', 6);




-- Procedure Version 2: Including the check if product exists or not
create or replace procedure pr_product_sales()
language plpgsql
as $$
declare
    -- declare variables
    v_prod_code     varchar(10);
    v_price         int;
    v_check         boolean;
begin
    -- main block of our code
    -- Check if product exists:
    select fn_check_if_prod_exists('iPhone 13 Pro Max', 1)
    into v_check;

    if v_check is False then
        raise notice 'Product not available!';
    else
        -- 1. Fetch the product_code and price for each product from products table
        select product_code, price
        into v_prod_code, v_price
        from products
        where product_name = 'iPhone 13 Pro Max';

        -- 2. load new data to sales table
        insert into sales (order_date, product_code, quantity_ordered, sale_price)
            values (current_date, v_prod_code, 1, (1*v_price));

        -- 3. update the products table accordingly as per sale.
        update products
        set quantity_remaining = quantity_remaining - 1
        , quantity_sold = quantity_sold + 1
        where product_code = v_prod_code;

        raise notice 'Product sold successfully!';
    end if;
end;
$$

-- Execute a procedure:
call pr_product_sales();

select * from products;
select * from sales;



-- Enahancing the procedure to purchase any given product and any no of quantity:

drop table sales;
drop table products;

create table products
(
	product_code			varchar(20) primary key,
	product_name			varchar(100),
	price					float,
	quantity_remaining		int,
	quantity_sold			int
);

create table sales
(
	order_id			int generated by default as identity primary key,
	order_date			date,
	product_code		varchar(20) references products(product_code),
	quantity_ordered	int,
	sale_price			float
);

insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P1', 'iPhone 13 Pro Max', 1200, 5, 195);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P2', 'AirPods Pro', 279, 10, 90);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P3', 'MacBook Pro 16', 5000, 2, 48);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P4', 'iPad Air', 650, 1, 9);

insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('10-01-2022','dd-mm-yyyy'), 'P1', 100, 120000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('20-01-2022','dd-mm-yyyy'), 'P1', 50, 60000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('05-02-2022','dd-mm-yyyy'), 'P1', 45, 540000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('15-01-2022','dd-mm-yyyy'), 'P2', 50, 13950);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-03-2022','dd-mm-yyyy'), 'P2', 40, 11160);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-02-2022','dd-mm-yyyy'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('15-03-2022','dd-mm-yyyy'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-03-2022','dd-mm-yyyy'), 'P3', 20, 100000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('21-04-2022','dd-mm-yyyy'), 'P3', 8, 40000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('27-04-2022','dd-mm-yyyy'), 'P4', 9, 5850);



select * from products;
select * from sales;



-- Procedure Version 3: with parameters
create or replace procedure pr_product_sales(p_product_name varchar, p_quantity int)
language plpgsql
as $$
declare
    -- declare variables
    v_prod_code     varchar(10);
    v_price         int;
    v_check         boolean;
begin
    -- main block of our code
    -- Check if product exists:
    select fn_check_if_prod_exists(p_product_name, p_quantity)
    into v_check;

    if v_check is False then
        raise notice 'Product not available!';
    else
        -- 1. Fetch the product_code and price for each product from products table
        select product_code, price
        into v_prod_code, v_price
        from products
        where product_name = p_product_name;

        -- 2. load new data to sales table
        insert into sales (order_date, product_code, quantity_ordered, sale_price)
            values (current_date, v_prod_code, p_quantity, (p_quantity * v_price));

        -- 3. update the products table accordingly as per sale.
        update products
        set quantity_remaining = quantity_remaining - p_quantity
        , quantity_sold = quantity_sold + p_quantity
        where product_code = v_prod_code;

        raise notice 'Product sold successfully!';
    end if;
end;
$$

-- Execute a procedure:
call pr_product_sales('AirPods Pro', 2);

select * from products;
select * from sales;


-- Different things we can have inside a procedure / function:
exception handling
loop statements like FOR loop, while loop
arrays / collections / types
cursor
triggers
OUT parameters
IN OUT parameters
DDL statements
dymanic statements using execute immediate etc
DML
DCL
etc etc...
