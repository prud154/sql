/* ************************************************************************** */
-- Creating procedure and function in ORACLE:
/* ************************************************************************** */
drop table sales;
drop table products;

create table products
(
	product_code			varchar(20) primary key,
	product_name			varchar(100),
	price					float,
	quantity_remaining		int,
	quantity_sold			int
);

create table sales
(
	order_id			int generated by default as identity primary key,
	order_date			date,
	product_code		varchar(20) references products(product_code),
	quantity_ordered	int,
	sale_price			float
);

insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P1', 'iPhone 13 Pro Max', 1200, 5, 195);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P2', 'AirPods Pro', 279, 10, 90);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P3', 'MacBook Pro 16', 5000, 2, 48);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P4', 'iPad Air', 650, 1, 9);

insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('10-01-2022','dd-mm-yyyy'), 'P1', 100, 120000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('20-01-2022','dd-mm-yyyy'), 'P1', 50, 60000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('05-02-2022','dd-mm-yyyy'), 'P1', 45, 540000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('15-01-2022','dd-mm-yyyy'), 'P2', 50, 13950);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-03-2022','dd-mm-yyyy'), 'P2', 40, 11160);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-02-2022','dd-mm-yyyy'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('15-03-2022','dd-mm-yyyy'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('25-03-2022','dd-mm-yyyy'), 'P3', 20, 100000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('21-04-2022','dd-mm-yyyy'), 'P3', 8, 40000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (to_date('27-04-2022','dd-mm-yyyy'), 'P4', 9, 5850);



create or replace function fn_check_if_prod_exists(p_product_name varchar2, p_quantity int)
return varchar2
as
    v_count     int; -- Declaration section
begin
    -- Execution section
    select count(1)
    into v_count
    from products
    where product_name = p_product_name
    and quantity_remaining >= p_quantity;

    if v_count > 0 then
        return 'True';
    else
        return 'False';
    end if;
exception when others
then
    null; -- exception handling section
end;


-- Execute a function:
select fn_check_if_prod_exists('iPhone 13 Pro Max', 2) from dual;


create or replace procedure pr_product_sales(p_product_name varchar, p_quantity int)
as

    -- declare variables
    v_prod_code     varchar(10);
    v_price         int;
    v_check         varchar(10);
begin
    -- main block of our code
    -- Check if product exists:
    select fn_check_if_prod_exists(p_product_name, p_quantity)
    into v_check
    from dual;

    if v_check = 'False' then
        dbms_output.put_line('Product not available!');
    else
        -- 1. Fetch the product_code and price for each product from products table
        select product_code, price
        into v_prod_code, v_price
        from products
        where product_name = p_product_name;

        -- 2. load new data to sales table
        insert into sales (order_date, product_code, quantity_ordered, sale_price)
            values (current_date, v_prod_code, p_quantity, (p_quantity * v_price));

        -- 3. update the products table accordingly as per sale.
        update products
        set quantity_remaining = quantity_remaining - p_quantity
        , quantity_sold = quantity_sold + p_quantity
        where product_code = v_prod_code;

        dbms_output.put_line('Product sold successfully!');
    end if;
end;


-- Execute a procedure:
exec pr_product_sales('AirPods Pro', 6);

select * from products;
select * from sales;





/* ************************************************************************** */
-- MSSQL:
/* ************************************************************************** */
create table products
(
	product_code			varchar(20) primary key,
	product_name			varchar(100),
	price					float,
	quantity_remaining		int,
	quantity_sold			int
);

create table sales
(
	order_id			int identity(1,1) primary key,
	order_date			date,
	product_code		varchar(20) references products(product_code),
	quantity_ordered	int,
	sale_price			float
);

insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P1', 'iPhone 13 Pro Max', 1200, 5, 195);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P2', 'AirPods Pro', 279, 10, 90);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P3', 'MacBook Pro 16', 5000, 2, 48);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P4', 'iPad Air', 650, 1, 9);

insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'10-01-2022',105), 'P1', 100, 120000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'20-01-2022',105), 'P1', 50, 60000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'05-02-2022',105), 'P1', 45, 540000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'15-01-2022',105), 'P2', 50, 13950);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'25-03-2022',105), 'P2', 40, 11160);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'25-02-2022',105), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'15-03-2022',105), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'25-03-2022',105), 'P3', 20, 100000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'21-04-2022',105), 'P3', 8, 40000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (convert(datetime,'27-04-2022',105), 'P4', 9, 5850);


create or alter function dbo.fn_check_if_prod_exists(@p_product_name varchar(20), @p_quantity int)
returns varchar
as
begin
declare @v_count        int;
declare @res            varchar(10);

    select @v_count = count(1)
    from products
    where product_name = @p_product_name
    and quantity_remaining >= @p_quantity;

    if @v_count > 0
        set @res = 'True';
    else
        set @res = 'False';

    return @res;
end;

-- Execute a function:
select  dbo.fn_check_if_prod_exists('iPhone 13 Pro Max', 6);

/* CREATING THE PROCEDURE */
create or alter procedure pr_buy_products(@p_product_name varchar(20), @p_quantity int)
as
begin
	declare @v_cnt           int,
			@v_product_code  varchar(20),
			@v_price         int;

	select @v_cnt = count(*)
    from products
    where product_name = @p_product_name
    and quantity_remaining >= @p_quantity;

    if @v_cnt > 0
	    begin
	        select @v_product_code = product_code, @v_price = price
	        from products
	        where product_name = @p_product_name
	        and quantity_remaining >= @p_quantity;

	        insert into sales (order_date,product_code,quantity_ordered,sale_price)
				values (cast(getdate() as date), @v_product_code, @p_quantity, (@v_price * @p_quantity));

	        update products
	        set quantity_remaining = (quantity_remaining - @p_quantity)
	        , quantity_sold = (quantity_sold + @p_quantity)
	        where product_code = @v_product_code;

	        print('Product sold!');
	    end
    else
        print('Insufficient Quantity!');
end;

-- Execute procedure:
exec pr_buy_products 'MacBook Pro 16',1;





/* ************************************************************************** */
-- MySQL:
/* ************************************************************************** */
use demo;

/* CREATING THE TABLES */
select * from products;
select * from sales;

drop table sales;
drop table products;

create table products
(
	product_code			varchar(20) primary key,
	product_name			varchar(100),
	price					float,
	quantity_remaining		int,
	quantity_sold			int
);

create table sales
(
	order_id			int auto_increment primary key,
	order_date			date,
	product_code		varchar(20) references products(product_code),
	quantity_ordered	int,
	sale_price			float
);

insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P1', 'iPhone 13 Pro Max', 1200, 5, 195);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P2', 'AirPods Pro', 279, 10, 90);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P3', 'MacBook Pro 16', 5000, 2, 48);
insert into products (product_code,product_name,price,quantity_remaining,quantity_sold)
	values ('P4', 'iPad Air', 650, 1, 9);

insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('10-01-2022','%d-%m-%Y'), 'P1', 100, 120000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('20-01-2022','%d-%m-%Y'), 'P1', 50, 60000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('05-02-2022','%d-%m-%Y'), 'P1', 45, 540000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('15-01-2022','%d-%m-%Y'), 'P2', 50, 13950);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('25-03-2022','%d-%m-%Y'), 'P2', 40, 11160);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('25-02-2022','%d-%m-%Y'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('15-03-2022','%d-%m-%Y'), 'P3', 10, 50000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('25-03-2022','%d-%m-%Y'), 'P3', 20, 100000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('21-04-2022','%d-%m-%Y'), 'P3', 8, 40000);
insert into sales (order_date,product_code,quantity_ordered,sale_price)
	values (str_to_date('27-04-2022','%d-%m-%Y'), 'P4', 9, 5850);



/* CREATING THE PROCEDURE */
drop procedure if exists pr_buy_products;

DELIMITER $$
create procedure pr_buy_products(p_product_name varchar(30), p_quantity int)
begin
	declare v_cnt           int;
	declare v_product_code  varchar(20);
	declare v_price         int;

    select count(*)
    into v_cnt
    from products
    where product_name = p_product_name
    and quantity_remaining >= p_quantity;

    if v_cnt > 0
    then
        select product_code, price
        into v_product_code, v_price
        from products
        where product_name = p_product_name
        and quantity_remaining >= p_quantity;

        insert into sales (order_date,product_code,quantity_ordered,sale_price)
			values (cast(now() as date), v_product_code, p_quantity, (v_price * p_quantity));

        update products
        set quantity_remaining = (quantity_remaining - p_quantity)
        , quantity_sold = (quantity_sold + p_quantity)
        where product_code = v_product_code;

        select 'Product sold!';
    else
        select 'Insufficient Quantity!';
    end if;
end$$

-- Execute procedure:
call pr_buy_products('MacBook Pro 16',1);





/* ************************************************************************** */
-- PROJECT:
/* ************************************************************************** */

/***
--> Digital Music Store - Data Analysis
Data Analysis project to help Chinook Digital Music Store to help how they can
optimize their business opportunities and to help answering business related questions.
***/

select * from Album; -- 347
select * from Artist; -- 275
select * from Customer; -- 59
select * from Employee; -- 8
select * from Genre; -- 25
select * from Invoice; -- 412
select * from InvoiceLine; -- 2240
select * from MediaType; -- 5
select * from Playlist; -- 18
select * from PlaylistTrack; -- 8715
select * from Track; -- 3503

/***
-- SQL Project Idea: Below is a few sample questions you can attempt to practice on this database.

    --> Which city corresponds to the best customers?

    --> The highest number of invoices belongs to which country?

    --> Name the best customer (customer who spent the most money).

    --> Suppose you want to host a rock concert in a city and want to know which location should host it. Query the dataset to find the city with the most rock-music listeners to answer this question.

    --> If you want to know which artists the store should invite, find out who is the highest-paid and most-listened-to.
***/

-- Steps followed during projects:
1. Extract the dataset
2. Analyse the data (identify relations between different tables)
3. Cleansing of data
4. Draw insights from data (solve problems or answers given questions using data) / Visualize data to share with stakeholders.

-- Cleansing of data:
1. remove redundant data or incorrect data
2. Exclude data which is not required for your project.
3. Fixing wrong data.
4. etc etc.

1) Are there any albums owned by multiple artist?
    select albumid, count(1) from Album
    group by albumid
    having count(1) > 1;
2) Is there any invoice which is issued to a non existing customer?
    select * from Invoice I
    where not exists (select * from customer c
                      where c.customerid = I.customerid)
3) Is there any invoice line for a non existing invoice?
4) Are there albums without a title?
5) Are there invalid tracks in the playlist?
6) etc...


-- SQL Queries to answer some questions from the chinook database.
1) Find the artist who has contributed with the maximum no of songs. Display the artist name and the no of albums.
2) Display the name, email id, country of all listeners who love Jazz, Rock and Pop music.
3) Find the employee who has supported the most no of customers. Display the employee name and designation
4) Which city corresponds to the best customers?
5) The highest number of invoices belongs to which country?
