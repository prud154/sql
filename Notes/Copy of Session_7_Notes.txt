/* START: How to Find the constraints in tables */

-- Microsoft SQL Server
SELECT TABLE_NAME,
       CONSTRAINT_TYPE,CONSTRAINT_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
WHERE TABLE_NAME=’student’;

Reference URL: https://learnsql.com/cookbook/how-to-find-the-name-of-a-constraint-in-sql-server/


-- Oracle:
SELECT *
  FROM user_cons_columns
 WHERE table_name = '<your table name>';


-- PostgreSQL:
SELECT conname, contype
FROM pg_catalog.pg_constraint
JOIN pg_class t ON t.oid = c.conrelid
WHERE t.relname ='student';


-- MySQL:
select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'yourTableName';

/* END: How to Find the constraints in tables */




-- Solution to Assignments from Session 6:

3) Find all orders for Planes, Ships and Trains which are neither Shipped nor In Process nor Resolved.
        select *
        from Sales_order s
        join products p on p.product_code=s.product
        where p.product_line in ('Planes', 'Ships', 'Trains')
        and s.deal_size not in ('Shipped', 'In Process', 'Resolved');
4) Find customers whose phone number has either parenthesis "()" or a plus sign "+".
        select *
        from Customers
        where phone like '%+%' or phone like '%(%' or phone like '%)%';
5) Find customers whose phone number does not have any space.
        select *
        from Customers
        where phone not like '% %';
6) Fetch all the orders between Feb 2003 and May 2003 where the quantity ordered was an even number.
        select *
        from Sales_order
        where order_date between to_date('01-02-2003', 'dd-mm-yyyy') and to_date('31-05-2003', 'dd-mm-yyyy')
        and quantity_ordered % 2 = 0;
7) Find orders which sold the product for price higher than its original price.
        select s.order_number, s.price_each, p.price, p.product_line, p.product_code
        from Sales_order s
        join products p on p.product_code=s.product
        where s.price_each > p.price;

8) Find the average sales order price
        select round(avg(sales)::decimal,2) as avg_sales
        from Sales_order;
9) Count total no of orders.
        select count(1) as total_orders from Sales_order;
10) Find the total quantity sold.
        select sum(quantity_ordered) as total_items_sold from Sales_order;
11) Fetch the first order date and the last order date.
        select min(order_date) first_order_date, max(order_date) last_order_date
        from sales_order;



-- GROUP BY & HAVING clause

select * from Sales_order;
select * from Customers;
select * from Products;

select product_line
from products
group by product_line;

select product_line, count(1)
from products
group by product_line;

select count(1)
from products;


select product_code, count(1)
from products
group by product_code;


select country ,count(1)
from Customers
group by country;


select country,city from  Customers where country = 'Spain';


select country , max(city), MIN(CITY)
from Customers
where country = 'Spain'
group by country;


select country , count(1)
from Customers
where country = 'Spain'
group by country;

select country, city from Customers where country = 'Spain';

select country,city, max(state) , count(1)
from Customers
where country = 'Spain'
group by country, city;

select country , max(city), MIN(CITY)
from Customers
where country = 'Spain'
group by country, city;

select country , max(city), MIN(CITY)
from Customers
where country = 'Spain'
group by country, city;

select count(1)
from Customers
where country = 'Spain'
group by country, city;

-- rules for Group by
1) column list in GROUP by and SELECT should match
2) Any additional column in select clause must be within the aggregate functions.
3) select clause only has aggregate functions
4) group by columns should either be present in select clause as standalone columns or within the aggregate functions.


select count(1)
from products;

select count(1)
from products
group by product_line;


-- fetch all product categories who have more than 20 vehicles under them
select product_line, count(1)
from products
group by product_line
having count(1) > 20;


-- fetch all product categories who have less than 20 vehicles under them. Do not consider Trains
select product_line, count(1) -- 3
from products  -- 1
where product_line <> 'Trains' -- 2
group by product_line -- 4
having count(1) < 20 -- 5
order by 1 -- 6
limit 2; -- 7


select product_line --, count(1)
from products
where product_line <> 'Trains'
group by product_line
having count(1) > 20




-- Difference in HAVING and where

-- Display the total salary given to all employees. Display it only if it is greater than 5000.
select sum(salary)
FROM Employees
Having sum(salary) >5000;

select sum(salary)
FROM Employees
where salary >5000;


-- Fetch the total salary earned in each branch. Display only total salary is greater than 5000.
select sum(salary)
FROM Employees
group by branch_code
Having sum(salary) >5000


select * from Employees;
